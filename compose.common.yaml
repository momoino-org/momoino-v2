services:
  database:
    image: ${POSTGRES_IMAGE}
    environment:
      POSTGRES_USER: ${SUPER_DB_USER}
      POSTGRES_PASSWORD: ${SUPER_DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./.docker/database/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - backend

  auth:
    image: ${KEYCLOAK_IMAGE}
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: database
      KC_DB_USERNAME: ${KEYCLOAK_DB_USERNAME}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - ./.docker/keycloak:/opt/keycloak/data/import
    command: start-dev --import-realm --health-enabled=true
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      - database
    networks:
      backend:
        aliases:
          - ${KEYCLOAK_NETWORK_ALIAS}

  redis-stack:
    image: ${REDIS_IMAGE}
    ports:
      - ${REDIS_PORT}:6379
      - ${REDIS_UI_PORT}:8001
    networks:
      - backend
  
  oauth2-proxy:
    image: ${OAUTH2_PROXY_IMAGE}
    ports:
      - ${OAUTH2_PROXY_PORT}:4180
    command: --alpha-config /oauth2-proxy-alpha-config.yaml
    environment:
      OAUTH2_PROXY_REVERSE_PROXY: ${OAUTH2_PROXY_REVERSE_PROXY}
      OAUTH2_PROXY_COOKIE_NAME: ${OAUTH2_PROXY_COOKIE_NAME}
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_SECURE: ${OAUTH2_PROXY_COOKIE_SECURE}
      OAUTH2_PROXY_COOKIE_REFRESH: ${OAUTH2_PROXY_COOKIE_REFRESH}
      OAUTH2_PROXY_COOKIE_EXPIRE: ${OAUTH2_PROXY_COOKIE_EXPIRE}
      OAUTH2_PROXY_EMAIL_DOMAINS: ${OAUTH2_PROXY_EMAIL_DOMAINS}
      OAUTH2_PROXY_WHITELIST_DOMAINS: ${OAUTH2_PROXY_WHITELIST_DOMAINS}
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: ${OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS}
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: ${OAUTH2_PROXY_SKIP_PROVIDER_BUTTON}
      OAUTH2_PROXY_SKIP_AUTH_ROUTES: ${OAUTH2_PROXY_SKIP_AUTH_ROUTES}
      OAUTH2_PROXY_SESSION_STORE_TYPE: ${OAUTH2_PROXY_SESSION_STORE_TYPE}
      OAUTH2_PROXY_REDIS_CONNECTION_URL: ${OAUTH2_PROXY_REDIS_CONNECTION_URL}

      # Custom ENV
      OAUTH2_PROXY_IMAGE: ${OAUTH2_PROXY_IMAGE}
      OAUTH2_PROXY_PORT: ${OAUTH2_PROXY_PORT} 
      OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_CODE_CHALLENGE_METHOD: ${OAUTH2_PROXY_CODE_CHALLENGE_METHOD}
      OAUTH2_PROXY_SCOPE: ${OAUTH2_PROXY_SCOPE}
      OAUTH2_PROXY_ISSUER_URL: ${OAUTH2_PROXY_ISSUER_URL}
      OAUTH2_PROXY_UPSTREAM_UI_URI: ${OAUTH2_PROXY_UPSTREAM_UI_URI}
      OAUTH2_PROXY_UPSTREAM_API_URI: ${OAUTH2_PROXY_UPSTREAM_API_URI}
    volumes:
      - ./.docker/oauth2-proxy/alpha-config.yaml:/oauth2-proxy-alpha-config.yaml
    depends_on:
      auth:
        condition: service_healthy
    networks:
      - backend
  
  jaeger:
    image: ${JAEGER_IMAGE}
    networks:
      - backend
